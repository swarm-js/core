#
# Deployments
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api
spec:
  replicas: 1
  revisionHistoryLimit: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: rg.fr-par.scw.cloud/goodmorningbusiness/api:latest
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 1000m
              memory: 500M
            requests:
              cpu: 1000m
              memory: 500M
          # ReadinessProbe: indicates whether the container is ready to service requests.
          # If the ReadinessProbe fails, the endpoints controller will remove the
          # podâ€™s IP address from the endpoints of all services that match the pod.
          # The default state of Readiness before the initial delay is Failure.
          #
          # Checks every w seconds, after 2 second initial wait
          # Fails after 2 probes => failureThreshold * periodSeconds = 4s
          # It means that after 4s the Service doesn't send more traffic to the pod
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          # LivenessProbe: indicates whether the container is live, i.e. running.
          # If the LivenessProbe fails, the kubelet will kill the container and
          # the container will be subjected to its RestartPolicy.
          # The default state of Liveness before the initial delay is Success
          #
          # Checks every 10 seconds, after 5 second initial wait
          # Fails after 3 probes => failureThreshold * periodSeconds = 30s
          # Timeout is 1s (1000ms), that's why we use promise timeout with 900ms
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
---
#
# Services
#
kind: Service
apiVersion: v1
metadata:
  name: api-service
spec:
  selector:
    app: api
  ports:
    - port: 80
---
#
# Ingresses
#
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: api-ingress
  annotations:
    spec.ingressClassName: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
spec:
  rules:
    - host: mydomain.com
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: api-service
                port:
                  number: 80
